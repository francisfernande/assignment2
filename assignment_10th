1. In Python, what is the difference between a built-in function and a user-defined function? Provide an example of each.
A1. built-in function are those function which are part of python and comes predefined.
    ex- len(), print()

    user-defined are function are those function which are created by programmers. They provide a way to modularize code by grouping a set of statements into a reusable function.
    ex- 
    def add_numbers(a, b):
    return a + b
    result = add_numbers(2, 3)
    print(result)  # Output: 5

2. How can you pass arguments to a function in Python? Explain the difference between positional arguments and keyword arguments.
A2. We can pass arguments in several ways - positional, keyword, default and arbitary
    Positional Arguments: These are passed to a function in the order they are listed. The values are assigned to parameters based on their position.
    Keyword Arguments: These are passed with the parameter names, so the order doesnt matter. They make the function call more readable and allow skipping default parameters.

3. What is the purpose of the return statement in a function? Can a function have multiple return statements? Explain with an example.
A3. The return function is used to exit a function and return a value to the calling code
    yes a function can have multiple return statement but only one will be executed.

4. What are lambda functions in Python? How are they different from regular functions? Provide an example where a lambda function can be useful.
A4. Lambda functions are anonymous functions created using the lambda keyword.
    They are useful for short, one-time operations and are often used with functions like map(), filter(), and sorted()
    square = lambda x: x**2
    print(square(5))  # Output: 25

5. How does the concept of "scope" apply to functions in Python? Explain the difference between local  scope and global scope.
A5. Local Scope: Variables defined inside a function are in the local scope and are only accessible within that function.
    Global Scope: Variables defined outside any function are in the global scope and can be accessed throughout the entire program.
    global_var = 10  # Global scope

    def example_function():
        local_var = 5  # Local scope

6. How can you use the "return" statement in a Python function to return multiple values?
A6. A function can return multiple values by packaging them into a tuple or another data structure.
    The values can be unpacked using multiple assignment when calling the function


7. What is the difference between the "pass by value" and "pass by reference" concepts when it comes to function arguments in Python?
A7. In Python, arguments are passed by object reference.
    Mutable objects (like lists) can be modified in-place within a function, and the changes are reflected outside the function.
    Immutable objects (like integers) cannot be modified in-place, so changes within a function do not affect the original object.

8. Create a function that can intake integer or decimal value and do following operations:
a. Logarithmic function (log x)
b. Exponential function (exp(x))
c. Power function with base 2 (2x)
d. Square root

A8. 
import math

def mathematical_operations(x):
    log_result = math.log(x)
    exp_result = math.exp(x)
    power_result = 2 ** x
    sqrt_result = math.sqrt(x)
    return log_result, exp_result, power_result, sqrt_result


9. Create a function that takes a full name as an argument and returns first name and last name.
A9. 
def extract(full_name):
  first_name, last_name = full_name.split()
  return first_name, last_name
