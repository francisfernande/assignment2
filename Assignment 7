1.

x = 10
y = 6

add_result = x + y
sub_result = x - y
mult_result = x*y
div_result = x / y

print(f"First First variable is {x} & second variable is {y}.")
print(f"Addition: {x} + {y} = {add_result}")
print(f"Subtraction: {x} - {y} = {sub_result}")
print(f"Multiplication: {x} * {y} = {mult_result}")
print(f"Division: {x} / {y} = {div_result}")

2. 

'/' performs regular division and returns a floating-point result,
while '//' performs floor division, rounding down to the nearest whole number.

result = 7 / 3
print(result)  # Output: 2.3333333333333335

result = 7 // 3
print(result)  # Output: 2

3.

x = True
y = False

# Using 'and' operator
result_and = x and y  # Result is False

# Using 'or' operator
result_or = x or y    # Result is True

# Using 'not' operator
result_not = not x    # Result is False

4.

Right Shift Operator (>>):

The right shift operator moves the bits of an integer to the right by a specified number of positions.
The rightmost bits that are shifted out are discarded, and the leftmost positions are filled with the sign bit (0 for positive numbers, 1 for negative numbers) or zero, depending on the context.
It effectively divides the number by 2 to the power of the specified shift value.

-- example --
x = 16  # Binary: 10000
result = x >> 2  # Right shift by 2 positions
print(result)  # Output: 4  (Binary: 00100)

Left Shift Operator (<<):

The left shift operator moves the bits of an integer to the left by a specified number of positions.
Zeros are shifted in from the right, and the leftmost bits that are shifted out are discarded.
It effectively multiplies the number by 2 to the power of the specified shift value.

-- example --
x = 4  # Binary: 00100
result = x << 2  # Left shift by 2 positions
print(result)  # Output: 16  (Binary: 10000)

5.


my_list = [5, 2, 8, 10, 15, 20, 7, 12, 18, 3, 6, 1, 9, 4, 14]

# Check if 10 is present in the list
if 10 in my_list:
    print("10 is present in the list.")
else:
    print("10 is not present in the list.")












